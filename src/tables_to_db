import csv

import os
import pandas as pd

import pymysql
import pymysql.cursors

import sqlalchemy
from sqlalchemy import create_engine

from tqdm import tqdm


# Takes a database, takes tables and inserts them into database at once:
def insert_tables_to_a_db(db: str, tables_path: str) -> pymysql.connections.Connection:
    # CONNECT TO PYMYSQL:
    connection = pymysql.connect(host='localhost',
                                 user=os.getenv('MYSQL_USER', "root"),
                                 password=os.getenv('MYSQL_PASSWORD', "root"),
                                 cursorclass=pymysql.cursors.DictCursor)

    # CHECKS WHETHER A DATABASE WITH db's NAME EXISTS AND CREATE DATABASE IF NOT:
    with (connection.cursor() as cursor):
        cursor.execute("SHOW DATABASES LIKE '{}'".format(db))
        do_we_have_this_db = cursor.fetchone()

        if do_we_have_this_db:
            cursor.execute('DROP DATABASE {}'.format(db))
            cursor.execute('CREATE DATABASE {}'.format(db))
        else:
            cursor.execute('CREATE DATABASE {}'.format(db))

    # Takes tables_path content and places it into a list
    table_directory_content = [os.path.join(tables_path, file) for file in os.listdir(tables_path) if
                         os.path.isfile(os.path.join(tables_path, file)) and file.endswith('.csv')]

    # insert tables' content into database:
    for table in tqdm(table_directory_content, "Inserindo planilhas no banco de dados: "):
        engine = create_engine(f"mysql+pymysql://{os.getenv('MYSQL_USER', 'root')}:"
                               f"{os.getenv('MYSQL_PASSWORD', 'root')}@localhost/{db}") #'converting' to sqlalchemy shape

        # PANDAS (to insert managed table into database):
        tb = pd.read_csv(table, on_bad_lines='error', encoding='latin_1')
        
        # ENSHORT IDENTIFIER NAME:
        table_name = os.path.basename(table).replace('.csv', '')
        
        tb.to_sql(table_name, engine, if_exists='append', index=False)

    return connection